priority -50

extends c

# We want to overwrite everything in parent ft.
priority -49

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet beginend "$1.begin(), $1.end() (beginend)"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
	${1/(\w+).*/$1/} (${2:arguments});
	virtual ~${1/(\w+).*/$1/} ();

private:
	${0:/* data */}
};
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{
	${VISUAL}${0}
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet

snippet readfile "read file (readF)"
std::vector<char> v;
if (FILE *fp = fopen(${1:"filename"}, "r"))
{
	char buf[1024];
	while(size_t len = fread(buf, 1, sizeof(buf), fp))
		v.insert(v.end(), buf, buf + len);
	fclose(fp);
}
endsnippet

snippet map "std::map (map)"
std::map<${1:key}, ${2:value}> map$0;
endsnippet

snippet vector "std::vector (v)"
std::vector<${1:char}> v$0;
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
endsnippet

snippet cla "An entire .h generator" b
#ifndef ${2:`!v substitute(vim_snippets#Filename('$1_H','ClassName'),'.*','\U&\E','')`}
#define $2

class ${1:`!v substitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`}
{
private:
	${3}

public:
	$1();
	virtual ~$1();
};

#endif /* $2 */
endsnippet
# vim:ft=snippets:

# Competitive Stuff
snippet pair "std::pair (pair)"
std::pair<${1:int},${2:int}> pair;
endsnippet

snippet factorial "factorial"
int fact[${1:1000010}];
void gen_fact(){
fact[0] = 1;
for(int i = 1;i<$1;i++)
	fact[i] = (i*1LL*fact[i-1])%mod;
}
endsnippet

snippet factorial "factorial with inverse"
int fact[${1:1000010}], inv[$1];
void gen_fact(){
fact[0] = 1;
inv[0] = POW(fact[0], mod-2);
for(int i = 1;i<$1;i++)
	fact[i] = (i*1LL*fact[i-1])%mod;
	inv[i] = POW(fact[i], mod-2);
}
endsnippet

snippet power "logarithmic power"
int POW(long long r, long long n){
	int ans = 1;
	while(n>0){
		if(n&1) ans = (ans*r)%mod;
		n >>= 1;
		r = (r*r)%mod;
	}
	return ans;
}
endsnippet

snippet combination "n <= 2000"
int C[${1:1001}][$1];
void gen_C(){
	for(int i = 0;i<$1;i++)
		C[i][0] = C[i][i] = 1;
	for(int i = 0;i<$1;i++)
		for(int j = 0;j<$1;j++)
			C[i][j] = (C[i-1][j-1] + C[i-1][j])%mod;
}
endsnippet

snippet combination "n <= 1000000"
long long C(int n, int k){
	return MUL(fact[n], MUL(inv[k], inv[n-k]));
}
endsnippet

snippet BIT "Binary Indexed Tree"
int BIT[${1:1000001}];
int query(int idx, int n){
	int ret = 0;
	while(idx>0){
		ret += BIT[idx];
		idx -= idx & -idx;
	}
	return ret;
}
void update(int idx, int n, int val){
	while(idx<=n){
		BIT[idx] += val;
		idx += idx & -idx;
	}
}
endsnippet

snippet segment_tree "Segment Tree"
#define ARR_SIZE ${1:100010}
struct node{
	//Node variables
};
node TREE[ARR_SIZE<<2];
int n,arr[ARR_SIZE];
using namespace std;
void build_segment_tree(int NODE,int a,int b){
	if(a==b){
		// Single node condition
		return;
	}
	int mid=(a+b)/2;
	int left=2*NODE,right=2*NODE+1;
	build_segment_tree(left,a,mid);
	build_segment_tree(right,mid+1,b);

	// Merge Logic for left and right
}
node query_segment_tree(int NODE,int a,int b,int x,int y){
	if(x<=a && y>=b)return TREE[NODE];
	int mid=(a+b)/2;
	int left=2*NODE,right=2*NODE+1;
	if(y<=mid)return query_segment_tree(left,a,mid,x,y);
	if(x>mid)return query_segment_tree(right,mid+1,b,x,y);

	node left_query=query_segment_tree(left,a,mid,x,y);
	node right_query=query_segment_tree(right,mid+1,b,x,y);

	node ans;
	// Merge left_query and right_query into ans
	return ans;
}
void update_segment_tree(int NODE,int a,int b,int x){
	if(a==b){
		//Single node logic
		return;
	}
	int mid=(a+b)/2;
	int left=2*NODE,right=2*NODE+1;
	if(x<=mid) update_segment_tree(left,a,mid,x);
	else update_segment_tree(right,mid+1,b,x);

	//Merge left and right nodes
}
endsnippet

snippet gcd "GCD"
int GCD(int a,int b){
	while(b){
		swap(a, b);
		b %= a;
	}
	return a;
}
endsnippet

snippet primes "sieve primes"
#define MAX_N ${1:3000000}
int sieve[MAX_N+1];
vector<int> primes;
void genPrimes(){
	primes.push_back(2);
	for(int i = 3;i<=MAX_N;i+=2){
		if(sieve[i] == 0){
			primes.push_back(i);
			if(i*1LL*i <= MAX_N)
			for(int j = i*i;j<=MAX_N;j+=i)
				sieve[j] = 1;
		}
	}
}
endsnippet

snippet start "Start Template"
#include <bits/stdc++.h>
#define in_T int t;for(scanf("%d",&t);t--;)
#define in_I(a) scanf("%d",&a)
#define in_F(a) scanf("%lf",&a)
#define in_L(a) scanf("%lld",&a)
#define in_S(a) scanf("%s",a)
#define newline printf("\n")
#define BE(a) a.begin(), a.end()

using namespace std;
const int mod = 1000000007;
#define MUL(a, b) ((a*1LL*b)%mod)
#define ADD(a, b) ((a+b)%mod)

int main(){
	$1
}
endsnippet
